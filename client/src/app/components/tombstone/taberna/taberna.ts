import { Component, AfterViewInit, Renderer2 } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { PuertaSalidaEdificioComponent } from '../puerta-salida-edificio/puerta-salida-edificio';

interface Dialogo {
  id: string;
  texto: string;
  respuestas?: { texto: string; next?: string }[];
}

@Component({
  selector: 'app-taberna',
  standalone: true,
  imports: [CommonModule, PuertaSalidaEdificioComponent],
  templateUrl: './taberna.html',
  styleUrls: ['./taberna.scss']
})
export class TabernaComponent implements AfterViewInit {
  mostrarDialogo = false;
  dialogoInicial = true;
  dialogoActual: Dialogo | null = null;
  conversacionTerminada = false;
  puertaAbierta = false;
  enBarra = false; // ‚¨ÖÔ∏è bot√≥n fijo visible cuando estamos en la barra/zoom
  
  constructor(private router: Router, private renderer: Renderer2) {}

  ngAfterViewInit() {
    // Esperamos a que el DOM est√© realmente renderizado
    setTimeout(() => {
      const contenedor = document.querySelector('.tabernero-container');
      const escena = document.querySelector('.escena-taberna');

      if (!contenedor || !escena) return;

      this.renderer.removeClass(contenedor, 'mirando-activo');

      setTimeout(() => this.renderer.addClass(contenedor, 'mirando-activo'), 1500);

      // Mostrar saludo
      setTimeout(() => {
        this.mostrarDialogo = true;
        this.dialogoInicial = true;

        // ü™ë Despu√©s del saludo, destacar taburetes
        setTimeout(() => {
          this.renderer.addClass(escena, 'destacar-taburetes');
        }, 1500);
      }, 2000);
    }, 0);
  }


  /** üîç Acercarse al tabernero (zoom + conversaci√≥n) */
  acercarseAlTabernero() {
    const escena = document.querySelector('.escena-taberna') as HTMLElement;
    const tabernero = document.querySelector('.tabernero-container img.mirando') as HTMLElement;
    if (!escena || !tabernero) return;
    if (escena.classList.contains('zoom-tabern')) return;

    const rectEscena = escena.getBoundingClientRect();
    const rectTabernero = tabernero.getBoundingClientRect();
    const taberneroCenterX = rectTabernero.left + rectTabernero.width / 2;
    const taberneroCenterY = rectTabernero.top + rectTabernero.height / 2;
    const viewportCenterX = window.innerWidth / 2;
    const viewportCenterY = window.innerHeight / 2;
    const offsetX = viewportCenterX - taberneroCenterX;
    const offsetY = viewportCenterY - taberneroCenterY;
    const txPercent = -50 + (offsetX / rectEscena.width) * 100;
    const tyPercent = -50 + (offsetY / rectEscena.height) * 100;

    const zoomScale = 3.6;
    const zoomSpeed = 4000; // 4 segundos de animaci√≥n
    const offsetFineX = 50;
    const offsetFineY = 0;

    // Aplicar par√°metros CSS din√°micos
    escena.style.setProperty('--zoom-tx', `${txPercent}%`);
    escena.style.setProperty('--zoom-ty', `${tyPercent}%`);
    escena.style.setProperty('--zoom-scale', `${zoomScale}`);
    escena.style.setProperty('--zoom-offset-x', `${offsetFineX}px`);
    escena.style.setProperty('--zoom-offset-y', `${offsetFineY}px`);
    escena.style.setProperty('--zoom-speed', `${zoomSpeed / 1000}s`);

    escena.classList.add('zoom-tabern');

    // üïì Esperar a que el zoom termine antes de mostrar la conversaci√≥n
    this.dialogoInicial = false;
    this.mostrarDialogo = false;

    setTimeout(() => {
      this.enBarra = true;          // ‚¨ÖÔ∏è mostrar bot√≥n fijo
      this.mostrarDialogo = true;
      this.iniciarConversacion();
    }, zoomSpeed + 200);
  }


  /** üó£Ô∏è Di√°logo completo */
  iniciarConversacion() {
    this.dialogoActual = {
      id: 'inicio',
      texto: 'Han pasado muchas cosas esta noche, Sheriff. Ese tipo del cartel ‚Äîel de ‚ÄúSE BUSCA‚Äù‚Äî ha estado aqu√≠ hace un rato. Entr√≥ tambale√°ndose, pidiendo whisky, con una mirada que no olvidar√©. Poco despu√©s, el banco ard√≠a. Lo que buscaba... lo llevaba en las manos, una especie de tabla negra con botones y una cuerda colgando.',
      respuestas: [
        { texto: '¬øSabes qu√© era esa tabla?', next: 'tabla' },
        { texto: '¬øQu√© dijo cuando estuvo aqu√≠?', next: 'habla' },
        { texto: '¬øViste hacia d√≥nde se fue?', next: 'ubicacion' }
      ]
    };
  }

  seleccionarRespuesta(nextId?: string) {
    if (!nextId) return;

    switch (nextId) {
      case 'tabla':
        this.dialogoActual = {
          id: 'tabla',
          texto: 'No tengo idea. Parec√≠a importante para √©l. La sujetaba como si fuera su √∫ltima esperanza. Dijo que con esa ‚Äútabla‚Äù pod√≠a traer cosas de su mundo a este. Tonter√≠as de borracho, pens√©.',
          respuestas: [
            { texto: '¬øTe cont√≥ c√≥mo funcionaba?', next: 'funciona' },
            { texto: '¬øParec√≠a peligroso?', next: 'peligro' }
          ]
        };
        break;

      case 'funciona':
        this.dialogoActual = {
          id: 'funciona',
          texto: 'Dec√≠a que pulsando los botones pod√≠a invocar objetos y darles vida. ‚ÄúTodo est√° hecho de c√≥digo‚Äù, repet√≠a una y otra vez. Hablaba de comandos, estructuras y algo que llam√≥ Angular, TypeScript... Palabras raras para m√≠.',
          respuestas: [
            { texto: 'Angular... suena a brujer√≠a.', next: 'brujeria' },
            { texto: 'Y t√∫, ¬øle cre√≠ste?', next: 'creer' }
          ]
        };
        break;

      case 'peligro':
        this.dialogoActual = {
          id: 'peligro',
          texto: 'Peligroso... no s√©, pero ten√≠a la mirada de alguien que ya no distingue la realidad del sue√±o. Dec√≠a que hab√≠a entrado aqu√≠ por error... que este mundo era suyo, construido con esas palabras que s√≥lo √©l entend√≠a.',
          respuestas: [
            { texto: '¬øDijo por qu√© lo hizo?', next: 'motivo' },
            { texto: '¬øY t√∫ qu√© hiciste?', next: 'reaccion' }
          ]
        };
        break;

      case 'motivo':
        this.dialogoActual = {
          id: 'motivo',
          texto: 'Dec√≠a que hab√≠a perdido algo. Algo que necesitaba para volver a su mundo. Que sin eso... quedar√≠a atrapado aqu√≠, entre los p√≠xeles y el polvo.',
          respuestas: [
            { texto: '¬øSe refer√≠a a la tabla?', next: 'tabla' },
            { texto: 'Curiosa historia...', next: 'creer' }
          ]
        };
        break;

      case 'reaccion':
        this.dialogoActual = {
          id: 'reaccion',
          texto: 'Yo s√≥lo llen√© su vaso y lo escuch√©. No todos los d√≠as entra alguien que asegura haber creado el mundo en el que vive.',
          respuestas: [
            { texto: 'Quiz√°s dec√≠a la verdad...', next: 'creer' },
            { texto: 'Tal vez estaba loco...', next: 'final' }
          ]
        };
        break;

      case 'brujeria':
        this.dialogoActual = {
          id: 'brujeria',
          texto: 'Brujer√≠a, tecnolog√≠a... no s√© qu√© diferencia hay, Serif. Dijo que con esos lenguajes pod√≠a crear lugares, gentes, hasta historias. Que este pueblo naci√≥ de ellos. Yo s√≥lo sirvo whisky, no mundos.',
          respuestas: [
            { texto: 'Parece que hablaba en serio...', next: 'creer' },
            { texto: 'Y luego incendi√≥ el banco...', next: 'banco' }
          ]
        };
        break;

      case 'creer':
        this.dialogoActual = {
          id: 'creer',
          texto: 'No le di cr√©dito. Aqu√≠ todos cuentan historias despu√©s de unas copas. Pero cuando o√≠ la explosi√≥n del banco, supe que no eran simples delirios. Puede que realmente trajera algo de su mundo al nuestro.',
          respuestas: [
            { texto: '¬øAlgo como qu√©?', next: 'objeto' },
            { texto: '¬øVolvi√≥ despu√©s?', next: 'volver' }
          ]
        };
        break;

      case 'habla':
        this.dialogoActual = {
          id: 'habla',
          texto: 'Dijo muchas cosas, Serif... demasiadas para un hombre sobrio. Hablaba de ‚Äúcrear mundos‚Äù con algo llamado Angular, y de darles vida con un tal TypeScript. Nombr√≥ una nube donde guardaba su oro... AWS, creo. Y otras palabras: Socket, Mongo, Nest... Sonaban a hechizos prohibidos.',
          respuestas: [
            { texto: '¬øHechizos prohibidos?', next: 'hechizos' },
            { texto: '¬øQu√© m√°s dec√≠a?', next: 'mas' }
          ]
        };
        break;

      case 'hechizos':
        this.dialogoActual = {
          id: 'hechizos',
          texto: 'S√≠. Dec√≠a que con esos hechizos pod√≠a hacer que las cosas se movieran solas, que la gente hablara sin verse... como si el aire llevara las palabras. Lo llam√≥ ‚ÄúSocket.IO‚Äù, un esp√≠ritu que viaja por los cables.',
          respuestas: [
            { texto: '¬øY t√∫ le cre√≠ste?', next: 'creer' },
            { texto: 'Sigue...', next: 'mas' }
          ]
        };
        break;

      case 'mas':
        this.dialogoActual = {
          id: 'mas',
          texto: 'No paraba de re√≠r, diciendo que pod√≠a levantar tabernas, bancos y hasta ciudades enteras con un lenguaje invisible llamado HTML. Y que las vest√≠a con algo llamado Tailwind y CSS, como si les cosiera la ropa al alma. Yo s√≥lo le serv√≠ otro whisky y le dije que aqu√≠ eso se llama delirio.',
          respuestas: [
            { texto: 'Quiz√° no era delirio...', next: 'creer' },
            { texto: 'Eso suena a brujer√≠a pura.', next: 'brujeria' }
          ]
        };
        break;

      case 'objeto':
        this.dialogoActual = {
          id: 'objeto',
          texto: 'Dec√≠a que su ‚Äútabla con botones‚Äù era la llave. Que con ella pod√≠a cruzar de un mundo al otro. Un teclado, creo que lo llam√≥. No s√© qu√© demonios es eso, pero jur√≥ que sin √©l estar√≠a atrapado aqu√≠ para siempre.',
          respuestas: [
            { texto: 'Y ahora ha vuelto a por √©l...', next: 'vuelve' },
            { texto: '¬øDijo algo m√°s?', next: 'final' }
          ]
        };
        break;

      case 'volver':
        this.dialogoActual = {
          id: 'volver',
          texto: 'Volvi√≥, s√≠. Lo vi pasar de nuevo por la puerta, m√°s decidido que antes. Ten√≠a la mirada de quien ya no teme nada, ni siquiera a su propia creaci√≥n.',
          respuestas: [
            { texto: '¬øY qu√© hizo?', next: 'banco' },
            { texto: 'Entonces el incendio...', next: 'banco' }
          ]
        };
        break;

      case 'banco':
        this.dialogoActual = {
          id: 'banco',
          texto: 'S√≠... el banco. Dicen que entr√≥ gritando ‚Äú¬°deploy fallido!‚Äù y luego todo empez√≥ a arder. Nadie entendi√≥ esas palabras, pero sonaron... definitivas.',
          respuestas: [
            { texto: 'Vaya historia...', next: 'final' },
            { texto: 'Quiz√°s lo encuentre en el desierto...', next: 'final' }
          ]
        };
        break;

      case 'vuelve':
        this.dialogoActual = {
          id: 'vuelve',
          texto: 'S√≠... volvi√≥ al banco y lo quem√≥. Sali√≥ con esa cosa en las manos, gritando que ten√≠a que ‚Äúreconectar con el sistema‚Äù. Luego mont√≥ a caballo y se perdi√≥ en el desierto. El humo a√∫n se ve desde aqu√≠.',
          respuestas: [
            { texto: 'El sistema...', next: 'sistema' },
            { texto: '¬øCrees que regresar√°?', next: 'final' }
          ]
        };
        break;

      case 'sistema':
        this.dialogoActual = {
          id: 'sistema',
          texto: 'No s√© qu√© quiso decir. Pero antes de irse dijo una √∫ltima cosa... que todos nosotros est√°bamos dentro de su c√≥digo. Y se ri√≥, como si fuera un chiste privado entre √©l y el mism√≠simo diablo.',
          respuestas: [
            { texto: 'Quiz√°s no ment√≠a...', next: 'final' },
            { texto: 'Vaya historia...', next: 'final' }
          ]
        };
        break;

      case 'ubicacion':
        this.dialogoActual = {
          id: 'ubicacion',
          texto: 'Sali√≥ del pueblo por el camino de las monta√±as. Iba borracho, pero decidido. Dec√≠a que arriba, donde se acaba el polvo, encontrar√≠a la salida.',
          respuestas: [
            { texto: 'La salida...', next: 'sistema' },
            { texto: 'Gracias, tabernero.', next: 'final' }
          ]
        };
        break;

      default:
        this.dialogoActual = {
          id: 'final',
          texto: 'Buena suerte, Serif. Si lo encuentra... no le mire a los ojos. A veces, los dioses de los c√≥digos no soportan que les devuelvan la mirada.'
        };
        this.conversacionTerminada = true;
        break;
    }
  }

  /** üîô Bot√≥n de volver al pueblo */
  volverAlPueblo() {
    const escena = document.getElementById('taberna');
    escena?.classList.add('saliendo');
    setTimeout(() => this.router.navigate(['/tombstone']), 800);
  }

  abrirPuertaAnimada() {
    if (this.puertaAbierta) return;
    this.puertaAbierta = true;

    const overlay = document.querySelector('.tunnel-overlay') as HTMLElement;
    if (!overlay) return;

    // 1Ô∏è‚É£ Activamos la animaci√≥n del t√∫nel (ya presente)
    overlay.classList.add('activa');

    // 2Ô∏è‚É£ Despu√©s de ~1.2 s, completamos el fundido a negro total
    setTimeout(() => {
      overlay.classList.add('fundido-total');
    }, 1200);

    // 3Ô∏è‚É£ Al acabar el fundido (‚âà2 s), cambiamos de escena
    setTimeout(() => {
      this.volverAlPueblo();
    }, 2000);
  }

  /** ‚Ü©Ô∏è Volver a la vista completa (salir del zoom) */
  volverVistaGeneral() {
    const escena = document.querySelector('.escena-taberna') as HTMLElement;
    if (!escena) return;

    // üî∏ a√±adimos clase de animaci√≥n "zoom-out"
    escena.classList.remove('zoom-tabern');
    escena.classList.add('zoom-out');

    // limpiamos estados al acabar la animaci√≥n
    setTimeout(() => {
      escena.classList.remove('zoom-out');
      this.enBarra = false;              // oculta bot√≥n fijo
      this.mostrarDialogo = false;
      this.conversacionTerminada = false;
      this.dialogoInicial = true;

      // ü™ë reactivar taburetes despu√©s de volver
      setTimeout(() => escena.classList.add('destacar-taburetes'), 600);
    }, 1800); // coincide con la duraci√≥n CSS
  }

}


